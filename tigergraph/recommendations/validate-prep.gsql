USE GRAPH Recommendations

SET syntax_version="v2"

// Finds the objects that are missing a mandatory property
// Since TigerGraph does not support null values, we check if the value is the
// default value instead
CREATE QUERY validateProperties () {
    violatingMovies =
        SELECT movie
        FROM Movie:movie
        WHERE movie.imdbId == "" OR movie.movieId == "" OR movie.title == "";

    violatingPersons =
        SELECT person
        FROM Actor|Director|ActorDirector:person
        WHERE person.name == "" OR person.tmdbId == "" OR person.url == "";

    violatingUsers =
        SELECT user
        FROM User:user
        WHERE user.name == "" OR user.userId == "";

    violatingGenres =
        SELECT genre
        FROM Genre:genre
        WHERE genre.genre == "";

    ListAccum<EDGE> @@violatingRatings; // use accumulator since we can't select edges
    tmp =
        SELECT movie // doesn't matter
        FROM User:user -(RATED>:rated)- Movie:movie
        WHERE rated.rating == 0.0 OR rated.timestamp == 0
        ACCUM @@violatingRatings += rated;

    PRINT violatingMovies, violatingPersons, violatingUsers, violatingGenres, @@violatingRatings;
}

// Finds the nodes that violate an edge cardinality constraint
CREATE QUERY validateCardinality () {
    // Find the actors who acted in 0 movies
    SumAccum<int> @numActedIn;
    tmp =
        SELECT actor
        FROM Actor|ActorDirector:actor -(ACTED_IN>)- Movie:m
        ACCUM actor.@numActedIn += 1;
    violatingActors =
        SELECT actor
        FROM Actor:actor
        WHERE actor.@numActedIn == 0;

    // Find the directors who directed 0 movies
    SumAccum<int> @numDirectorOf;
    tmp =
        SELECT director
        FROM Director|ActorDirector:director -(DIRECTOR_OF>)- Movie:m
        ACCUM director.@numDirectorOf += 1;
    violatingDirectors =
        SELECT director
        FROM Director:director
        WHERE director.@numDirectorOf == 0;

    // Find the movies that are in 0 genres
    SumAccum<int> @numInGenre;
    tmp =
        SELECT movie
        FROM Movie:movie -(IN_GENRE>)- Genre:g
        ACCUM movie.@numInGenre += 1;
    violatingMovies =
        SELECT movie
        FROM Movie:movie
        WHERE movie.@numInGenre == 0;

    PRINT violatingActors, violatingDirectors, violatingMovies;
}

INSTALL QUERY validateProperties, validateCardinality
